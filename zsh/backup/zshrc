# check times to load zsh
zmodload zsh/zprof

# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to my helper programs
export PATH=$HOME/dotfiles/helpers:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Path to Homebrew sbin
export PATH="/usr/local/sbin:$PATH"

# Add Python 3.9 path for nvim
export PATH="/Users/mark/Library/Python/3.9/bin:$PATH"

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}
# Load all of the plugins that were defined in ~/.zshrc  
# for plugin ($plugins); do
#   timer=$(($(gdate +%s%N)/1000000))
#   if [ -f $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh ]; then  
#     source $ZSH_CUSTOM/plugins/$plugin/$plugin.plugin.zsh  
#   elif [ -f $ZSH/plugins/$plugin/$plugin.plugin.zsh ]; then  
#     source $ZSH/plugins/$plugin/$plugin.plugin.zsh  
#   fi  
#   now=$(($(gdate +%s%N)/1000000))
#   elapsed=$(($now-$timer))  
#   echo $elapsed":" $plugin  
# done 

# Activate zsh history substring search
# source /usr/local/share/zsh-history-substring-search/zsh-history-substring-search.zsh

# Bind up and down to search substring history
# bindkey '^[0A' history-substring-search-up
# bindkey '^[0B' history-substring-search-down



###########################################################
# Pre configuration

# Define the environment variable ZPLUG_HOME 
export ZPLUG_HOME=/usr/local/opt/zplug

# Loads zplug
source $ZPLUG_HOME/init.zsh


###########################################################
# Packages

zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-history-substring-search"
zplug "plugins/git",   from:oh-my-zsh
zplug "plugins/fzf",   from:oh-my-zsh
zplug "plugins/colored-man-pages",   from:oh-my-zsh

###########################################################
# Theme

zplug "agnoster/agnoster-zsh-theme", as:theme

###########################################################
# Install packages that have not been installed yet
if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    else
        echo
    fi
fi

zplug load

# Bind up and down to search substring history
# bindkey '^[0A' history-substring-search-up
# bindkey '^[0B' history-substring-search-down


# Home Shell complition
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH
fi

#source oh mys zsh
# source $ZSH/oh-my-zsh.sh

# Shorten the prompt shown - has to come after source $ZSH/oh-my-zsh.sh
# prompt_dir () {
#  prompt_segment blue $CURRENT_FG '%1~'
# }
# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# makes sure that exuberant ctags is used and not the vim version
# ctags=/usr/local/bin/ctags

# Set up connection to use z to jump to directories
. /usr/local/etc/profile.d/z.sh

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
alias zshconfig="vim ~/.zshrc"
alias ohmyzsh="vim ~/.oh-my-zsh"
alias helpers="cdl ~/dotfiles/helpers"
alias launchschool="cdl ~/Dropbox\ \(Personal\)/Code/Launch_School/"
alias inbox="cdl ~/Dropbox\ \(Personal\)/Inbox"
# alias upgrade_all="brew upgrade; brew cu --no-quarantine -y --cleanup; upgrade_oh_my_zsh; zplug update"
alias upgrade_all="brew upgrade; brew cu --no-quarantine -y --cleanup; omz update; zplug update"
# alias notes="cdl ~/Library/Mobile\ Documents/iCloud~co~fluder~fsnotes/Documents"
# alias sz="source ~/.zshrc" # Old Version
alias sz="exec zsh"
alias db="cdl ~/Dropbox\ \(Personal\)"
alias bsa="cdl ~/Black\ Sheep\ Dropbox"
alias dotf="cdl ~/dotfiles"


# Functions
cdl () {
  builtin cd "$@"
  ls -alh
}

mcd () {
  mkdir -p "$1"
  cd "$1"
}

# using ripgrep combined with preview
# find-in-file - usage: fif <searchTerm>
fif() {
  if [ ! "$#" -gt 0 ]; then echo "Need a string to search for!"; return 1; fi
  rg --files-with-matches --no-messages "$1" | fzf --bind='ctrl-o:execute(vim - {})+abort' --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '$1' || rg --ignore-case --pretty --context 10 '$1' {}"
}

# FZF set up
# export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim {})+abort' --border --layout=reverse --height 60%  --multi --inline-info --ansi --preview='[[ \$(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat --style=numbers --color=always {} || cat {}) 2> /dev/null | head -500'"
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(vim - {})+abort,ctrl-y:execute-silent(echo {} | pbcopy)+abort,ctrl-w:toggle-preview,ctrl-d:half-page-down,ctrl-u:half-page-up' --layout=reverse --extended --height 60%  --multi --preview='highlight -O ansi -l {} 2> /dev/null || cat {} | head -500' --preview-window='wrap'"
# Use ripgrep as default search tool
export FZF_DEFAULT_COMMAND='rg --no-ignore-vcs --files --hidden --follow --glob "!.git/*"'
# export FZF_CTRL_T_COMMAND='$FZF_DEFAULT_COMMAND'



 # script to check if tmux is running and if not to start tmux
 _not_inside_tmux() { [[ -z "$TMUX" ]] }

ensure_tmux_is_running() {
  if _not_inside_tmux; then
    tat
  fi
}

ensure_tmux_is_running


# Adding rbenv to path
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# Link to Homebrew OpenSSL to upgrade automatically
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
# RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.0)" rbenv install 2.3.8

# heroku autocomplete setup - trying out the oh my zsh version
# HEROKU_AC_ZSH_SETUP_PATH=/Users/mark/Library/Caches/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# From fzf installation
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# set completion trigger for fzf
export FZF_COMPLETION_TRIGGER='**'
